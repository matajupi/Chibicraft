@startuml

class Texture {
    - {static} std::map<TID_T, Texture *> texture_table_

    + Texture(TID_T tid)
    + uint32_t GetPixel(int x, int y) const
    + void Load()
    + {static} cosnt Texture *GetTexture(TID_T tid)
}

enum BlockSurface {
    XY_Lower
    XY_Higher
    XZ_Lower
    XZ_Higher
    YZ_Lower
    YZ_Higher
}

class Block {
    - {static} std::map<BID_T, Block *> block_table_

    + Block(BID_T bid)
    + const Texture *GetTexture(BlockSurface surface)
    + {static} const Block *GetBlock(BID_T bid)
}

Block --> "use" Texture
Block --> "use" BlockSurface

class World {
    - std::vector<Chunk> chunks_

    + const Block *GetBlock(const glm::ivec3 &pos) const
    + void SetBlock(const glm::ivec3 &pos, const Block *block)
}
class Chunk {
    + const int kHeight
    + const int kWidth
    + const int kDepth
    - BID_T contents_[kHeight][kWidth][kDepth]

    + Chunk(CID_T cid)
    + bool Exists() const
    + void Generate()
    + void Load()
    + void Save()
    + const Block *GetBlock(const glm::ivec3 &pos) const
    + void SetBlock(const glm::ivec3 &pos, const Block *block)
}

World o--> Chunk
Chunk --> "use" Block

class Ray {
    + bool Cast(int x, int y, const Player &player, const World &world) const
}
abstract Raycaster {
    + {abstract} void Raycasting(Screen &screen, const Player &player, const World &world)
}
class SimpleRaycaster {
    + void Raycasting(Screen &screen, const Player &player, const World &world)
}
class CrossRaycaster {
    + void Raycasting(Screen &screen, const Player &player, const World &world)
}

SimpleRaycaster --|> Raycaster
CrossRaycaster --|> Raycaster
SimpleRaycaster --> "use" Ray

class Screen { }
class Player { }

@enduml
